package graphic;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.Writer;

import design.ConnectFour;
import javafx.animation.TranslateTransition;
import javafx.beans.property.SimpleObjectProperty;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.effect.DropShadow;
import javafx.scene.effect.Reflection;
import javafx.scene.input.MouseEvent;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.RowConstraints;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.TilePane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Path;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.Shape;
import javafx.stage.FileChooser;
import javafx.util.Duration;

public class ConnectFourGUI {

	private ConnectFour cfboard;
	private BorderPane root;
	private GridPane gridpane;

	private SimpleObjectProperty<Color> playerColorProperty = new SimpleObjectProperty<Color>(Color.RED);
	private int r;
	private int c;

	private int csize = 40;
	private int rsize = 100;
	private Shape cell;

	public ConnectFourGUI(ConnectFour connectFour) {
		this.cfboard = connectFour;
		this.gridpane = new GridPane();
		this.root = new BorderPane();
		HBox control = makeBox();

		root.setCenter(gridpane);
		root.setBottom(control);
		root.autosize();

		gridpane.setTranslateY(20);
		gridpane.setAlignment(Pos.CENTER);

		// for (int col = 0; col < ConnectFour.nbrOfCols; col++) {
		// gridpane.getColumnConstraints().addAll(new ColumnConstraints(10, 100,
		// Double.MAX_VALUE));
		// }
		//
		// for (int row = 0; row < ConnectFour.nbrOfRows; row++) {
		// gridpane.getRowConstraints().addAll(new RowConstraints(10, 100,
		// Double.MAX_VALUE));
		// }

		createGrids(gridpane);
		root.setCenter(gridpane);
		
		TextField tfield = makeTextField();
		root.setTop(tfield);

		DropShadow effect = new DropShadow();
		effect.setColor(Color.BLACK);
	}

	/** Returnerar roten. */
	public Parent getRoot() {
		return root;
	}

	// Create Grids
	private void createGrids(GridPane gridpane) {
		gridpane.getChildren().clear();
		for (r = 0; r < ConnectFour.nbrOfRows; r++) {
			for (c = 0; c < ConnectFour.nbrOfCols; c++) {

				Rectangle rect = new Rectangle(rsize, rsize);
				Circle circ = new Circle(csize);
				circ.centerXProperty().set(rsize / 2);
				circ.centerYProperty().set(rsize / 2);
				cell = Path.subtract(rect, circ);
				cell.setFill(Color.BLUE);
				cell.setStroke(Color.BLUE);
				cell.setOpacity(.8);
				DropShadow effect = new DropShadow();
				effect.setSpread(.2);
				effect.setRadius(25);
				effect.setColor(Color.BLUE);
				cell.setEffect(effect);

				ConnectFourCircle diskPreview = new ConnectFourCircle(csize, r, c);
				diskPreview.setOpacity(.25);
				diskPreview.setFill(Color.TRANSPARENT);

				ConnectFourCircle disk = new ConnectFourCircle(csize, r, c);
				disk.fillProperty().bind(playerColorProperty);
				disk.setOpacity(.75);
				disk.setTranslateY(-(100 * (r + 1)));
				final TranslateTransition translateTranstion = new TranslateTransition(Duration.millis(300), disk);

				StackPane stack = new StackPane();
				stack.getChildren().addAll(cell, diskPreview, disk);
				gridpane.add(stack, c, r);
				if (r == gridpane.getColumnConstraints().size() - 1) {
					stack.setEffect(new Reflection());
				}

				diskPreview.setOnMouseEntered(new EventHandler<MouseEvent>() {
					@Override
					public void handle(MouseEvent arg0) {
						diskPreview.setFill(Color.YELLOW);
						if (playerColorProperty.get() == Color.RED) {
							diskPreview.setFill(Color.RED);
						} else {
							diskPreview.setFill(Color.BLACK);
						}
					}
				});

				diskPreview.setOnMouseExited(new EventHandler<MouseEvent>() {
					@Override
					public void handle(MouseEvent arg0) {
						diskPreview.setFill(Color.TRANSPARENT);
					}
				});

				disk.setOnMouseEntered(new EventHandler<MouseEvent>() {
					@Override
					public void handle(MouseEvent arg0) {
						diskPreview.setFill(Color.YELLOW);
						if (playerColorProperty.get() == Color.RED) {
							diskPreview.setFill(Color.RED);
						} else {
							diskPreview.setFill(Color.YELLOW);
						}
					}
				});

				disk.setOnMouseExited(new EventHandler<MouseEvent>() {
					@Override
					public void handle(MouseEvent arg0) {
						diskPreview.setFill(Color.TRANSPARENT);
					}
				});

				disk.setOnMouseClicked(new EventHandler<MouseEvent>() {
					@Override
					public void handle(MouseEvent arg0) {
						if (disk.getTranslateY() != 0) {
							translateTranstion.setToY(0);
							translateTranstion.play();
							if (playerColorProperty.get() == Color.RED) {
								playerColorProperty.set(Color.YELLOW);
								disk.fillProperty().bind(new SimpleObjectProperty<Color>(Color.RED));
								cfboard.putChecker(c, 1);
							} else {
								playerColorProperty.set(Color.RED);
								disk.fillProperty().bind(new SimpleObjectProperty<Color>(Color.YELLOW));
								cfboard.putChecker(c, 2);
							}
						}
					}
				});

				diskPreview.setOnMouseClicked(new EventHandler<MouseEvent>() {
					@Override
					public void handle(MouseEvent arg0) {
						if (disk.getTranslateY() != 0) {
							translateTranstion.setToY(0);
							translateTranstion.play();
							if (playerColorProperty.get() == Color.RED) {
								disk.fillProperty().bind(new SimpleObjectProperty<Color>(Color.RED));
								playerColorProperty.set(Color.YELLOW);
								cfboard.putChecker(disk.getCol(), 1);
								if (cfboard.checkForWin()) {
									System.exit(0);
								}
							} else {
								playerColorProperty.set(Color.RED);
								disk.fillProperty().bind(new SimpleObjectProperty<Color>(Color.YELLOW));
								cfboard.putChecker(disk.getCol(), 2);
								if (cfboard.checkForWin()) {
									System.exit(0);
								}
							}
						}
					}
				});
			}
		}
	}
	
	private TextField makeTextField(){
		TextField tfield1 = new TextField();
		tfield1.setPromptText("Enter Player 1");
		
		tfield1.setAlignment(Pos.TOP_LEFT);
		
		return tfield1;
	}

	private HBox makeBox() {
		HBox hbox = new HBox();

		Button newGame = new Button("New Game");
		Button saveGame = new Button("Save Game");

		hbox.setPadding(new Insets(15, 12, 15, 12));
		hbox.setSpacing(10);
		hbox.setAlignment(Pos.BOTTOM_CENTER);

		newGame.setPrefSize(100, 20);
		newGame.setOnAction(e -> newGame());

		saveGame.setPrefSize(100, 20);
		saveGame.setOnAction(e -> saveGame());

		hbox.getChildren().addAll(newGame);
		hbox.getChildren().addAll(saveGame);
		return hbox;
	}

	private void update(GridPane gridpane) {
		gridpane.getChildren().clear();
		createGrids(gridpane);
	}

	private void newGame() {
		cfboard.clear();
		playerColorProperty.set(Color.RED);
		update(gridpane);
	}

	private void saveGame() {
		try (Writer writer = new BufferedWriter(
				new OutputStreamWriter(new FileOutputStream("SavedGame.txt"), "UTF-8"))) {
			for (int row = 0; row < ConnectFour.nbrOfRows; row++) {
				for (int col = 0; col < ConnectFour.nbrOfCols; col++) {
					writer.write(String.valueOf(cfboard.getBox(row, col)));
				}
			}
		} catch (IOException e) {

		}
	}

}