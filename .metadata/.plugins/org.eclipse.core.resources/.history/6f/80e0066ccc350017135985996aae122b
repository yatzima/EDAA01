package design;

public class ConnectFour {

	public static final int nbrOfRows = 6;
	public static final int nbrOfCols = 7;
	private int[][] connectFourBoard;

	public ConnectFour() {
		connectFourBoard = new int[nbrOfRows][nbrOfCols];
	}

	/**
	 * Puts a checker on the specified column and returns true if successful.
	 * 
	 * @param col,
	 *            color
	 * @return boolean
	 */
	public boolean putChecker(int col, int color) {
		if (col <= nbrOfCols && col >= 0) {
			for (int row = nbrOfRows; row >= 0; row--) {
				if (isEmpty(row, col)) {
					connectFourBoard[row][col] = color;
					return true;
				}
			}
		}
		return false;
	}

	/**
	 * Returns true if the box is empty.
	 * 
	 * @param row,
	 *            col
	 * @return boolean
	 */
	public boolean isEmpty(int row, int col) {
		return connectFourBoard[row][col] == 0;
	}

	/**
	 * Returns the player color on the specified box.
	 * 
	 * @param row,
	 *            col
	 * @return int
	 */
	public int getBox(int row, int col) {
		return connectFourBoard[row][col];
	}

	/**
	 * Clears the board of checkers.
	 * 
	 * @param
	 * 
	 * @return void
	 */
	public void clear() {
		for (int row = 0; row <= nbrOfRows; row++) {
			for (int col = 0; col <= nbrOfCols; col++) {
				connectFourBoard[row][col] = 0;
			}
		}
	}

	/**
	 * Returns true if game is ended.
	 * 
	 * @param
	 * 
	 * @return boolean
	 */
	public boolean checkForWin() {
		for (int row = nbrOfRows; row >= 0; row--) {
			for (int col = nbrOfCols; col >= 0; col--) {
				if (!isEmpty(row, col)) {
					int p = getBox(row, col);
					if (check(row, col, p)) {
						return true;
					}
				}
			}
		}
		return false;
	}

	private boolean check(int row, int col, int p) {
		int counter = 1;
		return (checkUp(row, col, p, counter) || checkDown(row, col, p, counter) || checkRight(row, col, p, counter))
				|| checkLeft(row, col, p, counter);
	}

	private boolean checkUp(int row, int col, int p, int counter) {
		if (counter == 4) {
			return true;
		}

		int up = row - 1;

		if (up <= nbrOfCols && up > 0 && getBox(up, col) == p) {
			counter++;
			checkUp(up, col, p, counter);
		}

		return false;
	}

	private boolean checkDown(int row, int col, int p, int counter) {
		if (counter == 4) {
			return true;
		}

		int down = row + 1;

		if (down <= nbrOfCols && down > 0 && getBox(down, col) == p) {
			counter++;
			checkUp(down, col, p, counter);
		}
		return false;
	}

	private boolean checkRight(int row, int col, int p, int counter) {
		if (counter == 4) {
			return true;
		}

		int right = col - 1;

		if (right <= nbrOfCols && right > 0 && getBox(row, right) == p) {
			counter++;
			checkRight(row, right, p, counter);
		}

		return false;
	}

	private boolean checkLeft(int row, int col, int p, int counter) {
		if (counter == 4) {
			return true;
		}

		int left = col + 1;

		if (left <= nbrOfCols && left > 0 && getBox(row, left) == p) {
			counter++;
			checkLeft(row, left, p, counter);
		}

		return false;
	}
}
